{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toLocaleDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","options","responsive","hover","mode","intersect","elements","point","radius","scales","xAxes","type","time","unit","labels","datasets","x","y","label","borderColor","backgroundColor","fill","barChart","legend","display","title","text","CountryPicker","props","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","selected","handleCountryChange","target","i","key","App","state","fetchedData","setState","this","image","src","covid","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6dacc5c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport cx from \"classnames\";\nimport styles from \"./Cards.module.css\";\nimport CountUp from \"react-countup\"\n\n\n/*\nIn App.js we only prop once, which is data={this.state.data}, so we need to\ndestructure data at first.\n*/\n\n// Cards: Stateless Functional Componet, without other methods other than render\n// This type of component don't support \"this\" statement, we need to use \"props\" as argument\n// Object destructure\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if(!confirmed) {\n    return \"Loading...\";\n  }\n  // console.log(props);\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n            <Typography variant=\"h6\">\n              <CountUp \n              start={0}\n              end={confirmed.value}\n              duration={2.5}\n              separator=\",\"\n              />\n              </Typography>\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toLocaleDateString()}</Typography>\n            <Typography variant=\"body2\">Total positive cases </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n            <Typography variant=\"h6\">\n              <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\" />\n              </Typography>\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toLocaleDateString()}</Typography>\n            <Typography variant=\"body2\">Total recoveries </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>Death</Typography>\n            <Typography variant=\"h6\">\n            <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toLocaleDateString()}</Typography>\n            <Typography variant=\"body2\">Total deaths</Typography>\n          </CardContent>\n        </Grid>\n\n      </Grid>\n    </div>\n  )\n}\n\nexport default Cards;\n","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n    let changeableUrl = url; \n    if(country) {\n        changeableUrl = `${url}/countries/${country}`\n    }\n\n    try {\n        // const response = await axios.get(url);\n        // return response;\n\n        // destructure the data from the response\n        // The following code means: pick the \"data\" property from `axios.get(url)`\n        // and them store it in a new const \"data\"\n        const { data: {confirmed, recovered, deaths, lastUpdate} } = await axios.get(changeableUrl);\n        const modifiedData = { confirmed, recovered, deaths, lastUpdate }\n        // console.log(modifiedData);\n\n        /*\n        const { data } = await axios.get(url);\n        \n        const modifiedData = {\n            confirmed: data.confirmed,\n            recovered: data.recovered,\n            deaths: data.deaths,\n            lastUpdate: data.lastUpdate,\n        }\n        */\n\n        return modifiedData;   \n        \n    } catch (error) {\n        console.log(error);  \n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n        // console.log(data);\n        // use map function to map each row of data, defined as dailyData parameter\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n        }));\n        return modifiedData;\n        \n    } catch (error) {\n        \n    }\n}\n\n\nexport const fetchCountries = async () => {\n    try {\n        const { data: { countries }} = await axios.get(`${url}/countries`);\n        return countries.map((country) => country.name);\n\n\n    } catch (error) {\n        console.log(error);\n        \n    }\n}","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n\n\n\n\nconst Chart = ({ data: {confirmed, recovered, deaths}, country }) => {\n\n  const [dailyData, setDailyData] = useState([]);\n  // dailyData is set to be an array, or an empty array []\n  /*\n  Above code has the same function as:\n  state = {\n    dailyData: {}\n  }\n\n  setDailyData used to populate dailyData\n  */\n\n  useEffect(() => {\n    // async function\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n      console.log(\"useEffect\");\n    }\n\n    // console.log(dailyData);\n\n    // call the function\n    fetchAPI();\n  }, []);\n  \n  const lineChart = (\n    // if the dailyData[0] == null, return null\n    dailyData.length !== 0 \n      ? (\n        <Line \n        options={{\n          responsive: true,\n          hover: {\n            mode: \"nearest\",\n            intersect: true\n          },\n          elements: {\n              point: {\n                  radius: 0\n              }\n          },\n          scales: {\n            xAxes: [{\n              type: \"time\",\n              time: {\n                unit: \"month\"\n              }\n            }]\n          }\n        }}\n        data={{\n          // dates from dailyData as labels\n          labels: dailyData.map(({ date }) => date),\n          // the api only gives daily data for confirmed & death, \n          // so we only use two dataset (stored as object)\n          // {} means an empty object\n          datasets: [{\n            data: dailyData.map((item) => {\n              return {x: item.date, y: item.confirmed}\n            }),\n            label: \"Infected\",\n            borderColor: \"rgba(0, 0, 255, 0.5)\",\n            backgroundColor: 'rgba(0, 0, 255, 0.1)',\n            fill: true,\n          }, {\n            data: dailyData.map((item) => {\n              return {x: item.date, y: item.deaths}\n            }),\n            label: \"Deaths\",\n            borderColor: 'rgba(255, 99, 132, 0.5)',\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            fill: true,\n          }],\n        }}\n        />\n      ) : null\n\n  );\n\n  // console.log(confirmed);\n  const barChart = (\n    confirmed \n      ? (\n        <Bar \n          data={{\n            labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n            datasets: [{\n              label: \"People\",\n              backgroundColor: [\n                \"rgba(0, 0, 255, 0.5)\",\n                \"rgba(0, 255, 0, 0.5)\",\n                \"rgba(255, 0, 0, 0.5)\"\n              ],\n              data: [confirmed.value, recovered.value, deaths.value]\n            }]\n          }}\n          options={{\n            legend: { display: false },\n            title: { display: true, text: `Current state in ${country}`}\n          }}\n        />\n\n      ) : null\n\n  );\n\n  return (\n    <div className={styles.container}>\n      {country ? barChart : lineChart}\n    </div>\n  )\n}\n\nexport default Chart;","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\"\n\nimport styles from \"./CountryPicker.module.css\";\n\nimport { fetchCountries } from \"../../api\";\n\n// here props can be changed as: { hancleCountryChange }\nconst CountryPicker = (props) => {\n  const [fetchedCountries, setFetchedCountries] = useState([]);\n\n  // callback\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setFetchedCountries(await fetchCountries());\n    }\n    // without the second parameter [setFetchedCountries], it will run endlessly\n    // with this parameter here, \n    // this fetchCountries() func run only when setFetchedCountries changed\n    fetchAPI();\n  }, [setFetchedCountries]);\n\n  // console.log(fetchedCountries);\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect \n        defaultValue=\"\" \n        onChange={(selected) => props.handleCountryChange(selected.target.value)}>\n        <option value=\"\">Global</option>\n        {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n      </NativeSelect>\n    </FormControl>\n  )\n}\n\nexport default CountryPicker;\n","import React from \"react\";\n\n// For importing multiple components at once\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\"; // it will search for index.js automatically\nimport covid from \"./images/image.png\"\n\n// class-based component, the root componet for this app\nclass App extends React.Component {\n  // Speical object in React, basically it includes any data this component needs\n  // state is local\n  // prop (property) is read only, store the input to this component\n  state = {\n    // data is a property.\n    data: {},\n    country: \"\",\n  };\n\n  // define a method in this class\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country });\n    //console.log(fetchedData);\n    // fetch country data\n    // set the state\n  }\n\n  render() {\n    const { data, country } = this.state;\n\n    return (\n      // jsx: what's the UI gonna look like. this.state, here \"this\" means the current object\n      <div className={styles.container}>\n        <img className={styles.image} src={covid} alt=\"COVID-19\"/>\n        <Cards data={data}/> \n        <CountryPicker handleCountryChange={this.handleCountryChange}/> \n        <Chart data={data} country={country}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}